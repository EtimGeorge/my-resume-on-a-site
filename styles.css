:root {
  --clr-neutral-100:hsla(0,0%, 100%, 1);
  --clr-primary-800:hsla(299, 47%, 17%, 1);
  --clr-primary-700:hsla(229, 43%, 20%, 1);
  --clr-primary-400:hsla(230, 50%, 58%, 0.3);
  --clr-primary-300:hsla(299, 36%, 39%, 1);
  --clr-primary-200:hsla(299, 21%, 53%, 1);
  --clr-accent-400:hsla(147, 93%, 43%, 1);
  --clr-secondary-400:hsla(299, 78%, 60%, 1);

  --ff-base:"outfit", sans-serif;

  --fw-regular: 300;
  --fw-semi-bold:400;
  --fw-bold:700;

  --fs-200:0.875rem ;
  --fs-300:1rem ;
  --fs-400:1.125rem ;
  --fs-500:1.375rem ;
  --fs-600:1.75rem ;
  --fs-700:clamp(2rem, 10vw - 0.5rem,3.25rem);
}

*,
*::before,
*::after{
  box-sizing: border-box;
}

img
/* svg,
picture,
video */{ 
  max-width: 100%;
  display: block;
  background-image: white;
}
/* seting user agent styles or scheme to dark */
html{
  color-scheme:dark ;
}

body{
  margin: 0;
  background-color: var(--clr-primary-700);
  color: var(--clr-neutral-100);
  font-family: var(--ff-base);
  font-size: var(--fs-400);
  line-height: 1.5;
  font-weight: var(--fw-regular);
}

.visually-hidden{
  clip:react(0 0 0 0);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;

}

.main-grid{

  --_aside-width: clamp(7.5rem, 20vw, 15rem);
  --_main-width:1fr;
  --_gap-size:10vw;

  display: grid;
  grid-template-columns: var(--_aside-width) var(--_main-width);
  gap: var(--_gap-size);
  grid-auto-flow: dense; /* this will move the aside which is now positioned at the bottom right of the first grid, to the top right, to prevent having an empty cell at the top. if you remove the grid-auto flow of value "dense", you will experience its fuction in the rule set. you can also solve this problem by asigning them grid-row of 1 to the main and to the aside*/

  align-items: center;

  min-height: 100vh; /*this will get it centered*/

  min-height: 100vhd; /*this accounts for the UI element on phones that move in and out when you scroll if  the browser doesnt suppot this the the 100vh serves as a fall-back*/

}

main {
  padding: block;
  grid-column: 2;/* this will move the main to  the second column in the grid.*/
  width: calc(100vw -  var(--_gap-size) - var(--_aside-width));
}



aside{
  grid-column: 1;/* while the aside will be moved to the first colum in the grid. [in the html code the aside is below the main]*/
  align-self: stretch;
  display: flex;
  justify-content: end;
}

.eybrow{
  color: var(--clr-secondary-400);
  font-size: var(--fs-300);
  font-weight: var(--fw-bold);
  text-transform: uppercase;
  letter-spacing: 0.2em; /* this will create space between the letters*/
  margin: 0;
}

.page-title{
  font-size: var(--fs-700);
  text-transform: uppercase;
  margin: 0;
  line-height: 1;
}

.intro{
  font-size: var(--fs-500);
  max-width: 45ch;
}
.job-experience{
  display: grid; /* even though its column that are next to one another*/
  grid-auto-flow: column; /* this makes it behave more like flex-box normally would, you see they are going next to one another and not down like grid would nomally do. This forces them to go next to one another, one caviet is that there wont be like a wrap option which will cause an overflow like with flex-box, and we want overflow*/
  justify-content: start;
  gap: 1rem; /* this will set gaps between the job-experience grid*/
  overflow-x: auto; /* this made the scroll bar to show up under the job-experience */
  position: relative;
  padding-block: 2rem;
  /* scrollbar-color: var(--clr-accent-400) var(--clr-primary-800); */
}

/* how to design scroll bars*/

.job-experience::-webkit-scrollbar {
 height: 1.40rem;
}

.job-experience::-webkit-scrollbar-track {
  background-color: var(--clr-primary-800);
  border-radius: 100vw;
}

.job-experience::-webkit-scrollbar-thumb{
  background-color: var(--clr-accent-400);
  border-radius: 100vw;
}

.job-experience::after{
  content: "";
  width: 200px;
  background:transparent;
}



.job{
  width: 35.5rem;
  padding: 2rem;
  border-radius:0.25rem;
  background: var(--clr-primary-800);
  padding-top: 3rem;
}

.job *{
  margin:0;
}

.job:first-child::before{
  content: "current role";
  position: absolute;
  color: var(--clr-accent-400);
  top: 0;
  left: 0;


}

.year{
  color: var(--clr-accent-400);
  font-size:var(--fs-300) ;
  font-weight: var(--fw-bold);
}

.job-info{
  display: flex;
  justify-content: space-between;
  align-items: baseline;
  margin-bottom: 1rem;
}

.role{
  font-size: var(--fs-600);
  line-height: 1.2;
}

.company{
  color: var(--clr-primary-200);
  font-size: var(--fs-300);
  font-weight: var(--fw-bold);
  text-transform: uppercase;
}

.icon-list{
  height: 100%;
  list-style: none;
  display: grid;
  gap: rem;
  border-left: 2px solid var(--clr-primary-300);
   padding: 0; /*ul and list items always have a default padding thats why we set the padding to 0. */
  margin: 0;
  /* margin-left: clamp(5rem, 10vw, 10rem);  to make the page more responsive we do want to set this withing a clamp that means its gonna be able to adjust according to the screen size available to it. as the screen grows bigger the margin-left will grow and when it shrinks it will shrink alongside  */
  align-content: center;
  
  
}

.icon-list > li {
  position: relative;
  padding: 3rem;
  

}
.icon-list > li::after{

  --_size:.7rem; /*the under score is to indicate that it is a private custom property that is only utiliesed by this property */
  content: "";
  position: absolute;
  top: 3rem;
  /* left: calc(var(--size) / -2); */
  left: 0;
  width: var(--_size);
  transform: translateX(-50%);
  aspect-ratio: 1; /*this means that the height and width are going to be the same.*/
  outline: 0.5rem solid var(--clr-primary-400); /* thi brings out the outline that surounds the circle which looks like a shadow*/
  border-radius: 50%;
  background-color: var(--clr-neutral-100);
}